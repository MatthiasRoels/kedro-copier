[project]
name = "{{ project_name }}"
readme = "README.md"
requires-python = ">=3.10"
description = "{{ short_description }}"
dependencies = [
    "kedro>=0.19.12",
]
dynamic = ["version"]

[tool.kedro]
project_name = "{{ project_name }}"
package_name = "{{ package_name }}"
kedro_init_version = "0.19.12"
source_dir = "src"

[tool.ruff]
line-length = 88
show-fixes = true

[tool.ruff.lint]

ignore = [ "E501",]
# select = [ "F", "W", "E", "I", "UP", "PL", "T201",]
# By default, ruff only uses all "E" (pycodestyle) and "F" (pyflakes) rules.
# Here we append to the defaults.
extend-select = [
    # pycodestyle
    "W",

    # mccabe
    #"C90",

    # isort
    "I",

    # pep-naming
    #"N",

    # pydocstyle
    "D101",
    "D106",
    "D2",
    "D3",
    "D402",
    "D403",
    "D412",
    "D419",

    # pyupgrade
    "UP",

    # flake8-2020
    "YTT",

    # flake8-annotations
    #"ANN",

    # flake8-bandit
    #"S",

    # flake8-blind-except
    #"BLE",

    # flake8-boolean-trap
    #"FBT",

    # flake8-bugbear
    "B",

    # flake8-builtins
    "A",

    # flake8-comprehensions
    "C4",

    # flake8-datetimez
    "DTZ",

    # flake8-errmsg
    #"EM",

    # flake8-import-conventions
    "ICN",

    # flake8-logging-format
    #"G",

    # flake8-pie
    "PIE",

    # flake8-pyi
    "PYI",

    # flake8-quotes
    "Q",

    # flake8-self
    "SLF",

    # flake8-simplify
    "SIM",

    # flake8-tidy-imports
    "TID",

    # flake8-type-checking
    "TCH",

    # flake8-unused-arguments
    "ARG",

    # pandas-vet
    "PD",

    # pylint
    "PLE",
    "PLR",
    "PLW",

    # NumPy-specific rules
    "NPY",

    # ruff specific ones:
    "RUF",
]

extend-ignore = [
    # 1 blank line required between summary line and description
    "D205",
    # Too many arguments to function call
    "PLR0913",
    # Magic number
    "PLR2004",
    # Pandas
    "PD901",
]

[tool.ruff.lint.per-file-ignores]
"src/tests/*" = ["SLF001", "ARG001"]

[tool.ruff.lint.pydocstyle]

# Enforce google-style docstrings. This is equivalent to ignoring a large number of pydocstyle (D)
# rules incompatible with google-style docstrings. See:
# https://google.github.io/styleguide/pyguide.html#383-functions-and-methods
convention = "google"

[tool.pytest.ini_options]
addopts = "--cov-report term-missing --cov src/{{ package_name }} -ra"
testpaths = [
    "src/tests",
]

[tool.coverage.report]
fail_under = 90
show_missing = true
exclude_lines = [ "pragma: no cover", "raise NotImplementedError",]

[tool.coverage.run]
omit = [
    # exclude schemas
    "src/{{ package_name }}/library/schemas/*",
    # kedro project template code
    "src/{{ package_name }}/__main__.py",
    "src/{{ package_name }}/pipeline_registry.py",
    "src/{{ package_name }}/settings.py",
    "src/{{ package_name }}/hooks.py",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-env>=1.1.5",
    "pytest-mock>=3.14.0",
]
